# -*- coding: utf-8 -*-
"""supercashiertransaction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FjOvLMWgkSOzZIIOXr8uXrzrneYCZhyY
"""

class Transaction:
    def __init__(self):
        self.items = []

    def add_item(self, nama_item, jumlah_item, harga_per_item):
      '''
      Function untuk menambahkan informasi item yang hendak dibeli.

      Parameters:
      nama_item : nama item yang ingin dibeli
      jumlah_item : kuantitas item yang ingin dibeli
      harga_per_item : harga satuan item yang ingin dibeli
      '''

      item = {
          'nama_item': nama_item.title(),
          'jumlah_item': jumlah_item,
          'harga_per_item': harga_per_item,
          'harga_total': jumlah_item * harga_per_item
        }
      self.items.append(item)
      print(f'Item "{nama_item}" sudah berhasil ditambahkan.')

    def check_order(self):
      '''
      Fungsi untuk memeriksa daftar item yang akan dibeli saat ini.
      Jika daftar kosong, akan mencetak pesan bahwa belum ada item yang dipilih.
      Jika daftar tidak kosong, akan mencetak informasi tentang setiap item dan total harga.
      Setelah itu, pengguna diminta untuk memastikan daftar belanja sudah benar atau tidak.
      Jika benar, pengguna diminta untuk melanjutkan ke pembayaran dengan memilih pilihan 8 (Total Harga).
      Jika tidak, pengguna dapat mengedit daftar belanja sebelumnya.
      '''
      if not self.items:
        print('Belum ada item yang dipilih.')
        return

      print('====================================================================')
      print('{:<20} {:<12} {:<15} {:<15}'.format('Item', 'Jumlah Item', 'Harga per Item', 'Harga Total'))
      print('====================================================================')

      for item in self.items:
          nama_item = item['nama_item']
          jumlah_item = item['jumlah_item']
          harga_per_item = item['harga_per_item']
          harga_total = jumlah_item * harga_per_item

          print('{:<20} {:<12} {:<15} {:<15}'.format(nama_item, jumlah_item, harga_per_item, harga_total))

      print('====================================================================')

      user_input = input('Apakah daftar belanja Anda sudah benar? (yes/no)').lower()

      if user_input == 'yes':
        print('Pemesanan sudah benar. Silakan dilanjutkan ke pembayaran dengan mengklik pilihan 8 (Total Harga).')
      elif user_input == 'no':
        print('Terdapat kesalahan input data. Mohon edit daftar belanja Anda menggunakan metode yang telah dijelaskan sebelumnya.')
      else:
        print('Input tidak valid. Mohon mencoba kembali')

    def total_price(self):
      '''
      Fungsi untuk menghitung total harga dari semua item yang akan dibeli.
      Setelah menghitung total harga, diskon diterapkan berdasarkan nilai total belanja.
      Jika total harga lebih dari Rp 500.000, diskon sebesar 10% diberikan.
      Jika total harga lebih dari Rp 300.000, diskon sebesar 8% diberikan.
      Jika total harga lebih dari Rp 200.000, diskon sebesar 5% diberikan.
      Setelah itu, mencetak total harga yang harus dibayarkan setelah diskon.
      '''
      total_order_price = 0
      for item in self.items:
        total_order_price += item['harga_total']

      if total_order_price > 500000:
        total_order_price = total_order_price - (total_order_price * 0.1)
      elif total_order_price > 300000:
        total_order_price = total_order_price - (total_order_price * 0.08)
      elif total_order_price > 200000:
        total_order_price = total_order_price - (total_order_price * 0.05)

      print(f'Total harga yang harus dibayarkan adalah Rp {total_order_price}')

    def reset_transaction(self):
      '''
      Fungsi untuk mengatur ulang transaksi dengan menghapus semua item dari daftar belanja.
      '''
      self.items = []
      print('Semua item berhasil dihapus.')

    def delete_item(self, item_name):
      '''
      Fungsi untuk menghapus item tertentu dari daftar belanja berdasarkan nama item.

      Parameters:
      item_name: Nama item yang ingin dihapus dari daftar belanja.
      '''
      item_found = False
      for item in self.items:
        if item['nama_item'] == item_name.title():
          self.items.remove(item)
          item_found = True
          break

      if item_found:
        print(f'{item_name} berhasil dihapus dari daftar belanja')
      else:
        print(f'{item_name} tidak ditemukan dalam daftar belanja')

    def update_item_name(self, item_name, new_item_name):
      '''
      Fungsi untuk memperbarui nama item tertentu dalam daftar belanja.

      Parameters:
      item_name: Nama item yang ingin diperbarui.
      new_item_name: Nama baru yang akan menggantikan nama item sebelumnya.
      '''

      item_found = False
      for item in self.items:
        if item['nama_item'] == item_name.title():
          item['nama_item'] = new_item_name.title()
          item_found = True
          break

      if item_found:
        print(f'{item_name} berhasil dihapus dari daftar belanja. Lalu diganti dengan {new_item_name}')
      else:
        print(f'{item_name} tidak ditemukan dalam daftar belanja')

    def update_item_qty(self, item_name, new_item_qty):
      '''
      Fungsi untuk memperbarui kuantitas (jumlah) item tertentu dalam daftar belanja.

      Parameters:
      item_name: Nama item yang ingin diperbarui kuantitasnya.
      new_item_qty: Jumlah baru yang akan menggantikan jumlah item sebelumnya.
      '''
      item_found = False
      for item in self.items:
        if item['nama_item'] == item_name.title():
          item['jumlah_item'] = new_item_qty
          item_found = True
          break

      if item_found:
        print(f'Kuantitas {item_name} sudah diperbarui')
      else:
        print(f'{item_name} tidak ditemukan dalam daftar belanja')

    def update_item_price(self, item_name, new_item_price):
      '''
      Fungsi untuk memperbarui harga per item tertentu dalam daftar belanja.

      Parameters:
      item_name: Nama item yang ingin diperbarui harga per item-nya.
      new_item_price: Harga baru yang akan menggantikan harga per item sebelumnya.
      '''
      item_found = False
      for item in self.items:
        if item['nama_item'] == item_name.title():
          item['harga_per_item'] = new_item_price
          item_found = True
          break

      if item_found:
        print(f'Harga {item_name} berhasil diperbarui dari daftar belanja.')
      else:
        print(f'{item_name} tidak ditemukan dalam daftar belanja')

    def show_menu(self):
      '''
      Fungsi untuk menampilkan menu pilihan kepada pengguna dan menghandle aksi yang dipilih oleh pengguna.
      Menu ini memungkinkan pengguna untuk menambah, mengubah, menghapus, mengatur ulang, dan melihat daftar belanja.
      Juga, pengguna dapat melihat total harga dan keluar dari program jika diinginkan.
      '''
      while True:
        print("=========== Home Market Menu ===========")
        print("1. Tambah item belanja")
        print("2. Perbarui nama item")
        print("3. Perbarui jumlah item")
        print("4. Perbarui harga item")
        print("5. Hapus item belanja")
        print("6. Reset Transaksi")
        print("7. Cek daftar belanja")
        print("8. Total harga")
        print("0. Keluar")
        print("=======================================")

        choice = input('Pilih menu (0-8): ')

        if choice == "1":
          nama_item = self.get_valid_string_input("Nama item: ")
          jumlah_item = self.get_valid_quantity_input("Jumlah item: ")
          harga_per_item = self.get_valid_price_input("Harga per item: ")
          self.add_item(nama_item, jumlah_item, harga_per_item)

        elif choice == "2":
          item_name = input("Nama item yang ingin diperbarui: ")
          new_item_name = input("Nama item baru: ")
          self.update_item_name(item_name, new_item_name)

        elif choice == "3":
          item_name = input("Nama item yang ingin diperbarui: ")
          new_item_qty = int(input("Jumlah item baru: "))
          self.update_item_qty(item_name, new_item_qty)

        elif choice == "4":
          item_name = input("Nama item yang ingin diperbarui: ")
          new_item_price = float(input("Harga item baru: "))
          self.update_item_price(item_name, new_item_price)

        elif choice == "5":
          item_name = input("Nama item yang ingin dihapus: ")
          self.delete_item(item_name)

        elif choice == "6":
          self.reset_transaction()

        elif choice == "7":
          self.check_order()

        elif choice == "8":
          self.total_price()

        elif choice == "0":
          print("Terima kasih telah berbelanja di Home Market!")
          break

        else:
          print("Pilihan tidak valid. Silakan pilih menu yang sesuai.")

    def get_valid_string_input(self, prompt):
      '''
      Fungsi helper (bantuan) untuk mendapatkan input teks yang valid dari pengguna.

      Parameters:
      prompt: Pesan yang akan ditampilkan kepada pengguna sebagai petunjuk untuk input.

      Returns:
      Input teks yang valid dari pengguna setelah diperiksa (tidak boleh kosong).
      '''
      while True:
        input_string = input(prompt)
        if not input_string.strip():
            print("Nama item tidak boleh kosong.")
        else:
            return input_string

    def get_valid_quantity_input(self, prompt):
      '''
      Fungsi helper (bantuan) untuk mendapatkan input kuantitas yang valid dari pengguna.

      Parameters:
      prompt: Pesan yang akan ditampilkan kepada pengguna sebagai petunjuk untuk input.

      Returns:
      Input kuantitas yang valid dari pengguna setelah diperiksa (harus angka integer dan tidak boleh negatif).
      '''
      while True:
        try:
            quantity = int(input(prompt))
            if quantity < 0:
                print("Jumlah item tidak boleh negatif.")
            else:
                return quantity
        except ValueError:
            print("Jumlah item harus berupa angka.")

    def get_valid_price_input(self, prompt):
      '''
      Fungsi helper (bantuan) untuk mendapatkan input harga yang valid dari pengguna.

      Parameters:
      prompt: Pesan yang akan ditampilkan kepada pengguna sebagai petunjuk untuk input.

      Returns:
      Input harga yang valid dari pengguna setelah diperiksa (harus angka float dan tidak boleh negatif).
      '''
      while True:
        try:
            price = float(input(prompt))
            if price < 0:
                print("Harga per item tidak boleh negatif.")
            else:
                return price
        except ValueError:
            print("Harga per item harus berupa angka.")